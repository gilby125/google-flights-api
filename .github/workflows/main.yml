name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.21
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/flight-api

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: make build

    - name: Run tests
      run: |
        go test -p 4 -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate TLS Certificates
      run: |
        # Verify required certificate files exist
        if [ ! -f tls/tls.crt ] || [ ! -f tls/tls.key ] || [ ! -f tls/ca.crt ]; then
          echo "Missing required TLS certificate files"
          exit 1
        fi

        # Verify certificate file permissions
        if [ "$(stat -c %a tls/tls.key)" -ne 600 ]; then
          echo "Invalid permissions on TLS private key - must be 600"
          exit 1
        fi
        
        # Verify certificate validity
        openssl x509 -in tls/tls.crt -noout -dates
        openssl x509 -in tls/ca.crt -noout -dates
        openssl rsa -in tls/tls.key -check -noout

        # Verify certificate chain
        openssl verify -CAfile tls/ca.crt tls/tls.crt

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        # No build args needed for pre-generated certs
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        exit-code: 1
        severity: 'HIGH,CRITICAL'

    - name: Grype scan
      uses: anchore/grype-docker-action@main
      with:
        image: ${{ env.DOCKER_IMAGE }}:latest
        fail-build: true
        severity-cutoff: high

  deploy-swarm:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'push'
    steps:
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SWARM_MANAGER }}
        username: ${{ secrets.SWARM_USER }}
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          docker stack deploy \
            --with-registry-auth \
            -c docker-compose.prod.yml \
            flight-api
