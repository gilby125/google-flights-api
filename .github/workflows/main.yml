name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.21
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/flight-api

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: make build

    - name: Run tests
      run: |
        go test -p 4 -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check for vulnerabilities
      run: |
        go list -m all
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate TLS Certificates
      run: |
        # Verify required certificate files exist
        if [ ! -f tls/tls.crt ] || [ ! -f tls/tls.key ] || [ ! -f tls/ca.crt ]; then
          echo "Missing required TLS certificate files"
          exit 1
        fi

        # Verify certificate file permissions
        if [ "$(stat -c %a tls/tls.key)" -ne 600 ]; then
          echo "Invalid permissions on TLS private key - must be 600"
          exit 1
        fi
        
        # Verify certificate validity
        openssl x509 -in tls/tls.crt -noout -dates
        openssl x509 -in tls/ca.crt -noout -dates
        openssl rsa -in tls/tls.key -check -noout

        # Verify certificate chain
        openssl verify -CAfile tls/ca.crt tls/tls.crt

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        # No build args needed for pre-generated certs
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        exit-code: 1
        severity: 'HIGH,CRITICAL'

    - name: Grype scan
      uses: anchore/grype-docker-action@main
      with:
        image: ${{ env.DOCKER_IMAGE }}:latest
        fail-build: true
        severity-cutoff: high

  deploy-kubernetes-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: '1.27.3'

    - name: Deploy to Staging
      working-directory: kubernetes/manifests/staging
      run: |
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ${HOME}/.kube/config
        kubectl apply -k .
        kubectl rollout status deployment/flight-api-staging

  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-kubernetes-staging]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install hey
      run: go install github.com/rakyll/hey@latest

    - name: Run performance tests
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG_DATA }}
      run: |
        echo "Starting performance tests against staging..."
        mkdir -p $HOME/.kube
        echo "$KUBECONFIG" | base64 -d > $HOME/.kube/config
        
        STAGING_URL=$(kubectl get svc flight-api-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        echo "Testing health endpoint:"
        hey -n 1000 -c 50 http://$STAGING_URL:8080/healthz
        
        echo "Testing search endpoint:"
        hey -n 5000 -c 100 -m POST \
          -T "application/json" \
          -D test/load/search_payload.json \
          http://$STAGING_URL:8080/api/v1/search
        
        echo "Verifying latency thresholds:"
        if ! hey -n 1000 -c 50 http://$STAGING_URL:8080/healthz | grep -q '95% in 500ms'; then
          echo "Performance threshold exceeded!"
          exit 1
        fi

  deploy-swarm:
    runs-on: ubuntu-latest
    needs: [deploy-kubernetes-staging, performance-test]
    if: github.event_name == 'push'
    steps:
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SWARM_MANAGER }}
        username: ${{ secrets.SWARM_USER }}
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          # Capture current running version
          PREV_IMAGE=$(docker service inspect --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}' flight-api_web)
          echo "PREV_IMAGE=${PREV_IMAGE}" >> $GITHUB_ENV
          
          # Deploy new version
          docker stack deploy \
            --with-registry-auth \
            -c docker-compose.prod.yml \
            flight-api
          
          # Verify deployment health
          MAX_RETRIES=3
          RETRY_DELAY=30
          for i in $(seq 1 $MAX_RETRIES); do
            if docker service inspect --format '{{.UpdateStatus.State}}' flight-api_web | grep -q "completed"; then
              echo "Deployment verified healthy"
              exit 0
            fi
            echo "Waiting for healthy deployment (attempt $i/$MAX_RETRIES)"
            sleep $RETRY_DELAY
          done
          
          # Rollback if verification fails
          echo "Deployment failed - rolling back to ${PREV_IMAGE}"
          docker service update \
            --image ${PREV_IMAGE} \
            --rollback-parallelism 1 \
            --update-delay 30s \
            flight-api_web
          exit 1
